<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>com.github.krakenninja</groupId>
        <artifactId>kraken-bom</artifactId>
        <version>1.0.0-RELEASE</version>
    </parent>
    
    <groupId>com.github.krakenninja.demo</groupId>
    <artifactId>fraud-detection-job</artifactId>
    <version>${revision}${changelist}</version>
    <packaging>jar</packaging>
    <name>fraud-detection-job</name>
    <description>
        Kafka-Flink Job demo that had been modified from original source 
        https://github.com/afedulov/fraud-detection-demo/tree/master/flink-job 
        to use Flink's Table API instead of Flink's DataStream API
    </description>
    
    <properties>
        <!-- Project -->
        <revision>1.0.0</revision><!-- https://maven.apache.org/maven-ci-friendly.html -->
        <changelist>-SNAPSHOT</changelist><!-- https://maven.apache.org/maven-ci-friendly.html -->
        <jacoco.coveredratio.minimum>0.00</jacoco.coveredratio.minimum><!-- 20241106 : CKW temporarily disable codecoverage -->
    </properties>
    
    <dependencies>
        <!-- Internal -->

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <!-- Kafka -->
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_2.13</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
        </dependency>

        <!-- Flink -->
        <dependency>
            <groupId>org.apache.flink</groupId>
            <artifactId>flink-table-api-java</artifactId>
        </dependency>
        
        <!-- Confluent -->
        <dependency>
            <groupId>io.confluent.flink</groupId>
            <artifactId>confluent-flink-table-api-java-plugin</artifactId>
        </dependency>
        
        <!-- Apache Commons CLI -->
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
        </dependency>
        
        <!-- Jakarta -->
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
        </dependency>
        
        <!-- Spring -->
        <dependency> 
            <groupId>org.springframework.boot</groupId> 
            <artifactId>spring-boot-starter-validation</artifactId> 
        </dependency>
        
        <!-- JUnit Test -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Logging (to produce console output in Unit Test) -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <!-- Run shade goal on package phase -->
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <excludes>
                                    <exclude>org.apache.flink:flink-shaded-force-shading</exclude>
                                    <exclude>com.google.code.findbugs:jsr305</exclude>
                                </excludes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <!-- Do not copy the signatures in the META-INF folder.
                                    Otherwise, this might cause SecurityExceptions when using the JAR. -->
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
<!--                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.github.krakenninja.demo.HelloTableApi</mainClass>
                                </transformer>
                            </transformers>-->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>**/*IntegrationTest.java</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>run-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>generate-code-coverage-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>CLASS</element>
                                    <!--
                                        Limit counter(s) : 
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                        INSTRUCTION 
                                          - The smallest unit JaCoCo counts are 
                                            single Java byte code instructions. 
                                            Instruction coverage provides 
                                            information about the amount of code 
                                            that has been executed or missed
                                        BRANCH
                                          - JaCoCo calculates branch coverage 
                                            for all if and switch statements. 
                                            This metric counts the total number 
                                            of such branches in a method and 
                                            determines the number of executed or 
                                            missed branches
                                        LINE
                                          - For all class files that have been 
                                            compiled with debug information, 
                                            coverage information for individual 
                                            lines can be calculated. A source 
                                            line is considered executed when at 
                                            least one instruction that is 
                                            assigned to this line has been 
                                            executed
                                        COMPLEXITY
                                          - JaCoCo also calculates cyclomatic 
                                            complexity for each non-abstract 
                                            method and summarizes complexity for 
                                            classes, packages and groups. 
                                            Cyclomatic complexity is the minimum 
                                            number of paths that can, in (linear) 
                                            combination, generate all possible 
                                            paths through a method
                                        METHOD 
                                          - Each non-abstract method contains at 
                                            least one instruction. A method is 
                                            considered as executed when at least 
                                            one instruction has been executed
                                        CLASS 
                                          - A class is considered as executed 
                                            when at least one of its methods has 
                                            been executed. Note that JaCoCo 
                                            considers constructors as well as 
                                            static initializers as methods
                                    -->
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>${jacoco.coveredratio.minimum}</minimum>
                                        </limit>
                                        <limit>
                                            <counter>BRANCH</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>${jacoco.coveredratio.minimum}</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
